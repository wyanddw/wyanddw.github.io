[{"title":"java log日志相关","date":"2017-03-19T13:07:13.000Z","path":"2017/03/19/java-log/","text":"配置根Loggerlog4j.rootLogger = [level],appenderName,appenderName2,... level是日志记录的优先级，分为OFF,TRACE,DEBUG,INFO,WARN,ERROR,FATAL,ALL Log4j建议只使用四个级别，优先级从低到高分别是DEBUG,INFO,WARN,ERROR 通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关 比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来 appenderName就是指定日志信息输出到哪个地方。可同时指定多个输出目的 例子： log4j.rootLogger = ERROR,console,file 配置日志信息输出目的地Appenderlog4j.appender.appenderName = fully.qualified.name.of.appender.class log4j.appender.appenderName.optionN = valueN Log4j提供的appender有以下几种： 1)org.apache.log4j.ConsoleAppender(输出到控制台) 2)org.apache.log4j.FileAppender(输出到文件,同一个文件) 3)org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件) 4)org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件) 5)org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方) 例子： log4j.appender.file = org.apache.log4j.DailyRollingFileAppender log4j.appender.file.File = ${user.home}/logs/book.log log4j.appender.file.DatePattern = &apos;_&apos;yyyyMMdd log4j.appender.console = org.apache.log4j.ConsoleAppender log4j.appender.console.layout = org.apache.log4j.PatternLayout log4j.appender.console.layout.ConversionPattern = %m%n #1)ConsoleAppender选项属性 # -Threshold = DEBUG:指定日志消息的输出最低层次 # -ImmediateFlush = TRUE:默认值是true,所有的消息都会被立即输出 # -Target = System.err:默认值System.out,输出到控制台(err为红色,out为黑色) # #2)FileAppender选项属性 # -Threshold = INFO:指定日志消息的输出最低层次 # -ImmediateFlush = TRUE:默认值是true,所有的消息都会被立即输出 # -File = C:\\log4j.log:指定消息输出到C:\\log4j.log文件 # -Append = FALSE:默认值true,将消息追加到指定文件中，false指将消息覆盖指定的文件内容 # -Encoding = UTF-8:可以指定文件编码格式 #3)DailyRollingFileAppender选项属性 # -Threshold = WARN:指定日志消息的输出最低层次 # -ImmediateFlush = TRUE:默认值是true,所有的消息都会被立即输出 # -File = C:\\log4j.log:指定消息输出到C:\\log4j.log文件 # -Append = FALSE:默认值true,将消息追加到指定文件中，false指将消息覆盖指定的文件内容 # -DatePattern=&apos;.&apos;yyyy-ww:每周滚动一次文件,即每周产生一个新的文件。还可以按用以下参数: # &apos;.&apos;yyyy-MM:每月 # &apos;.&apos;yyyy-ww:每周 # &apos;.&apos;yyyy-MM-dd:每天 # &apos;.&apos;yyyy-MM-dd-a:每天两次 # &apos;.&apos;yyyy-MM-dd-HH:每小时 # &apos;.&apos;yyyy-MM-dd-HH-mm:每分钟 # -Encoding = UTF-8:可以指定文件编码格式 # #4)RollingFileAppender选项属性 # -Threshold = ERROR:指定日志消息的输出最低层次 # -ImmediateFlush = TRUE:默认值是true,所有的消息都会被立即输出 # -File = C:/log4j.log:指定消息输出到C:/log4j.log文件 # -Append = FALSE:默认值true,将消息追加到指定文件中，false指将消息覆盖指定的文件内容 # -MaxFileSize = 100KB:后缀可以是KB,MB,GB.在日志文件到达该大小时,将会自动滚动.如:log4j.log.1 # -MaxBackupIndex = 2:指定可以产生的滚动文件的最大数 # -Encoding = UTF-8:可以指定文件编码格式 配置日志信息的格局其语法为： # #log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class #log4j.appender.appenderName.layout.optionN = valueN # #Log4j提供的layout有以下几种： #1)org.apache.log4j.HTMLLayout(以HTML表格形式布局) #2)org.apache.log4j.PatternLayout(可以灵活地指定布局模式) #3)org.apache.log4j.SimpleLayout(包含日志信息的级别和信息字符串) #4)org.apache.log4j.TTCCLayout(包含日志产生的时间、线程、类别等等信息) #5)org.apache.log4j.xml.XMLLayout(以XML形式布局) # #HTMLLayout选项属性 # -LocationInfo = TRUE:默认值false,输出Java文件名称和行号 # -Title=Struts Log Message:默认值 Log4J Log Messages # #PatternLayout选项属性 # -ConversionPattern = %m%n:格式化指定的消息(参数意思下面有) # #XMLLayout选项属性 # -LocationInfo = TRUE:默认值false,输出java文件名称和行号 # 打印参数#Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，打印参数如下： # %m 输出代码中指定的消息 # %p 输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL # %r 输出自应用启动到输出该log信息耗费的毫秒数 # %c 输出所属的类目,通常就是所在类的全名 # %t 输出产生该日志事件的线程名 # %n 输出一个回车换行符，Windows平台为“\\r\\n”，Unix平台为“\\n” # %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式 # 如：%d{yyyy年MM月dd日 HH:mm:ss,SSS}，输出类似：2012年01月05日 22:10:28,921 # %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数 # 如：Testlog.main(TestLog.java:10) # %F 输出日志消息产生时所在的文件名称 # %L 输出代码中的行号 # %x 输出和当前线程相关联的NDC(嵌套诊断环境),像java servlets多客户多线程的应用中 # %% 输出一个&quot;%&quot;字符 # # 可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如： # %5c: 输出category名称，最小宽度是5，category&lt;5，默认的情况下右对齐 # %-5c:输出category名称，最小宽度是5，category&lt;5，&quot;-&quot;号指定左对齐,会有空格 # %.5c:输出category名称，最大宽度是5，category&gt;5，就会将左边多出的字符截掉，&lt;5不会有空格 # %20.30c:category名称&lt;20补空格，并且右对齐，&gt;30字符，就从左边交远销出的字符截掉 指定特定包的输出级别#log4j.logger.org.springframework=DEBUG 例子#输出到控制台 log4j.appender.systemOut = org.apache.log4j.ConsoleAppender log4j.appender.systemOut.layout = org.apache.log4j.PatternLayout log4j.appender.systemOut.layout.ConversionPattern = [%-5p][%-22d{yyyy/MM/dd HH:mm:ssS}][%l]%n%m%n log4j.appender.systemOut.Threshold = DEBUG log4j.appender.systemOut.ImmediateFlush = TRUE log4j.appender.systemOut.Target = System.out #输出到文件 log4j.appender.logFile = org.apache.log4j.FileAppender log4j.appender.logFile.layout = org.apache.log4j.PatternLayout log4j.appender.logFile.layout.ConversionPattern = [%-5p][%-22d{yyyy/MM/dd HH:mm:ssS}][%l]%n%m%n log4j.appender.logFile.Threshold = DEBUG log4j.appender.logFile.ImmediateFlush = TRUE log4j.appender.logFile.Append = TRUE log4j.appender.logFile.File = ../Struts2/WebRoot/log/File/log4j_Struts.log log4j.appender.logFile.Encoding = UTF-8 #按DatePattern输出到文件 log4j.appender.logDailyFile = org.apache.log4j.DailyRollingFileAppender log4j.appender.logDailyFile.layout = org.apache.log4j.PatternLayout log4j.appender.logDailyFile.layout.ConversionPattern = [%-5p][%-22d{yyyy/MM/dd HH:mm:ssS}][%l]%n%m%n log4j.appender.logDailyFile.Threshold = DEBUG log4j.appender.logDailyFile.ImmediateFlush = TRUE log4j.appender.logDailyFile.Append = TRUE log4j.appender.logDailyFile.File = ../Struts2/WebRoot/log/DailyFile/log4j_Struts log4j.appender.logDailyFile.DatePattern = &apos;.&apos;yyyy-MM-dd-HH-mm&apos;.log&apos; log4j.appender.logDailyFile.Encoding = UTF-8 #设定文件大小输出到文件 log4j.appender.logRollingFile = org.apache.log4j.RollingFileAppender log4j.appender.logRollingFile.layout = org.apache.log4j.PatternLayout log4j.appender.logRollingFile.layout.ConversionPattern = [%-5p][%-22d{yyyy/MM/dd HH:mm:ssS}][%l]%n%m%n log4j.appender.logRollingFile.Threshold = DEBUG log4j.appender.logRollingFile.ImmediateFlush = TRUE log4j.appender.logRollingFile.Append = TRUE log4j.appender.logRollingFile.File = ../Struts2/WebRoot/log/RollingFile/log4j_Struts.log log4j.appender.logRollingFile.MaxFileSize = 1MB log4j.appender.logRollingFile.MaxBackupIndex = 10 log4j.appender.logRollingFile.Encoding = UTF-8 #用Email发送日志 log4j.appender.logMail = org.apache.log4j.NET.SMTPAppender log4j.appender.logMail.layout = org.apache.log4j.HTMLLayout log4j.appender.logMail.layout.LocationInfo = TRUE log4j.appender.logMail.layout.Title = Struts2 Mail LogFile log4j.appender.logMail.Threshold = DEBUG log4j.appender.logMail.SMTPDebug = FALSE log4j.appender.logMail.SMTPHost = SMTP.163.com log4j.appender.logMail.From = xly3000@163.com log4j.appender.logMail.To = xly3000@gmail.com #log4j.appender.logMail.Cc = xly3000@gmail.com #log4j.appender.logMail.Bcc = xly3000@gmail.com log4j.appender.logMail.SMTPUsername = xly3000 log4j.appender.logMail.SMTPPassword = 1234567 log4j.appender.logMail.Subject = Log4j Log Messages #log4j.appender.logMail.BufferSize = 1024 #log4j.appender.logMail.SMTPAuth = TRUE #将日志登录到MySQL数据库 log4j.appender.logDB = org.apache.log4j.jdbc.JDBCAppender log4j.appender.logDB.layout = org.apache.log4j.PatternLayout log4j.appender.logDB.Driver = com.mysql.jdbc.Driver log4j.appender.logDB.URL = jdbc:mysql://127.0.0.1:3306/xly log4j.appender.logDB.User = root log4j.appender.logDB.Password = 123456 log4j.appender.logDB.Sql = INSERT INTOT_log4j(project_name,create_date,level,category,file_name,thread_name,line,all_category,message)values(&apos;Struts2&apos;,&apos;%d{yyyy-MM-ddHH:mm:ss}&apos;,&apos;%p&apos;,&apos;%c&apos;,&apos;%F&apos;,&apos;%t&apos;,&apos;%L&apos;,&apos;%l&apos;,&apos;%m&apos;)","tags":[{"name":"-java -log","slug":"java-log","permalink":"https://wyanddw.github.io/tags/java-log/"}]},{"title":"hexo配置操作","date":"2017-03-19T12:10:03.000Z","path":"2017/03/19/post/","text":"平时常用命令整理hexo new post &quot;新建文章&quot; hexo c 清除旧的public文件夹 hexo g 生成静态文件 hexo d 发布到github上 hexo d -g 前面两个命令的合体 hexo s -p 5000 启动端口号5000的服务","tags":[{"name":"博客","slug":"博客","permalink":"https://wyanddw.github.io/tags/博客/"}]},{"title":"Hello World","date":"2017-03-17T14:12:17.459Z","path":"2017/03/17/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"并发编程","date":"2017-03-17T02:14:36.000Z","path":"2017/03/17/hello/","text":"摘要:隐式锁和显示锁，死锁正文: 隐式锁所谓的隐式锁就是指synchronized标记，此标记可以加在method上，也可以加在代码块上。加在代码块上的效率较高，同时加锁的对象一般定义为： &gt;代码 private byte[] lock = new byte[1]; public void mehod(){ synchronized(lock){ //TODO } } 显示锁Lock和ReentrantLockLock接口，提供了无条件的，可轮询的，定时的，可中断的锁获取操作，所有加锁和解锁的方法都是显示的 void lock()获取锁，如果锁不可用，出于线程调度的目的，将禁用当前线程，并且在获得锁之前，该线程一直处于休眠状态 void lockInterruptibly() throws InterruptedExceptionlock 优先考虑获取锁，待获取锁成功后，才响应中断。lockInterruptibly 优先考虑响应中断，而不是响应锁的普通获取或重入获取。ReentrantLock.lockInterruptibly允许在等待时由其它线程调用等待线程的Thread.interrupt方法来中断等待线程的等待而直接返回,这时不用获取锁，而会抛出一个InterruptedException。ReentrantLock.lock方法不允许Thread.interrupt中断,即使检测到Thread.isInterrupted,一样会继续尝试获取锁，失败则继续休眠。只是在最后获取锁成功后再把当前线程置为interrupted状态,然后再中断线程。 boolean tryLock(long ParamLong , TimeUnit ParamTimeUnit)throws InterruptedException尝试获取锁，如果能获取返回true,反则返回false,可加入时间限制和时间单位 unlock()对于拥有锁的线程释放锁 new Condition()应用比较复杂，单独分析返回用来与lock实例一起使用的Condition实例","tags":[{"name":"技术","slug":"技术","permalink":"https://wyanddw.github.io/tags/技术/"}]}]